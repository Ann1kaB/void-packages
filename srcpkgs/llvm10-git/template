# Template file for 'llvm10-git'
# -DCMAKE_C_COMPILER=clang 
# -DCMAKE_CXX_COMPILER=clang++ 
# -DLLVM_ENABLE_PROJECTS=\"polly;clang;lld;compiler-rt;libcxx;libcxxabi;libunwind\" 
# -DLLVM_TARGETS_TO_BUILD=\"X86\" 
# -DLLVM_ENABLE_LIBCXX=YES 
# -DLIBCXXABI_USE_COMPILER_RT=YES 
# -DLIBCXXABI_USE_LLVM_UNWINDER=YES
 #-G 'Unix\ Makefiles'"
        #-D LLDB_USE_SYSTEM_SIX=1 \
pkgname=llvm10-git
version=10.0.0
revision=5
#wrksrc="llvm-${version}.src"
build_style=cmake
configure_args="
        -D LLVM_APPEND_VC_REV=ON
        -D LLVM_BUILD_LLVM_DYLIB=ON
        -D LLVM_LINK_LLVM_DYLIB=ON
        -D LLVM_INSTALL_UTILS=ON
        -D LLVM_ENABLE_PROJECTS=\"polly;lld;compiler-rt\"
        -D CMAKE_BUILD_TYPE=Release
        -D LLVM_ENABLE_RTTI=ON
        -D LLVM_ENABLE_FFI=ON
	-D LLVM_BINUTILS_INCDIR=/usr/include"
hostmakedepends="groff perl python3 zlib-devel libffi-devel swig llvm10 clang lld git ninja libunwind-devel"
makedepends="python3-devel zlib-devel libffi-devel libedit-devel
 libxml2-devel binutils-devel libatomic-devel"
depends="libllvm10"
short_desc="Low Level Virtual Machine"
maintainer="q66 <daniel@octaforge.org>"
license="NCSA"
homepage="https://www.llvm.org"
python_version=3

_lldb_enable=yes

if [ "$CROSS_BUILD" ]; then
	_lldb_enable=no
fi

case "$XBPS_TARGET_MACHINE" in
	ppc64le*) ;;
	ppc*) _lldb_enable=no ;;
esac

#subpackages="clang-tools-extra clang clang-analyzer libclang libclang-cpp libllvm10"
subpackages="libllvm10"
if [ "$_lldb_enable" = "yes" ]; then
	# XXX fails to cross compile due to python
	subpackages+=" polly"
fi
#subpackages+=" lld lld-devel"

do_fetch(){
  git clone https://github.com/llvm/llvm-project.git ${wrksrc}
  cd ${wrksrc}
  git checkout release/11.x
}

pre_configure() {
	cd ${wrksrc}/llvm
	# Vastly reduce size of debugging symbols:
	CFLAGS=${CFLAGS/ -g/ -g1}
	CXXFLAGS=${CXXFLAGS/ -g/ -g1}

	# since gcc9, the build likes to blow up for ppc32 apparently because
	# of clang being too large for a 24-bit relative call to the PLT, so
	# optimize for size instead
	case "$XBPS_TARGET_MACHINE" in
		mips*-musl|ppc|ppc-musl) configure_args+=" -DVOID_CXX_OPT_FLAGS=-Os" ;;
	esac

	if [ "$CROSS_BUILD" ]; then
		msg_normal "Building host tblgen\n"
		mkdir -p build/HOST
		cd build/HOST
		CC="$BUILD_CC" CXX="$BUILD_CXX" CFLAGS="$BUILD_CFLAGS" \
			CXXFLAGS="$BUILD_CXXFLAGS" LDFLAGS="$BUILD_LDFLAGS" \
			cmake ../.. -DCMAKE_BUILD_TYPE=Release
		make ${makejobs} -C utils/TableGen
		make ${makejobs} -C tools/clang/utils/TableGen
		configure_args+=" -DLLVM_TABLEGEN=${wrksrc}/build/HOST/bin/llvm-tblgen"
		configure_args+=" -DCLANG_TABLEGEN=${wrksrc}/build/HOST/bin/clang-tblgen"
		cd ../..
	fi

	case "$XBPS_TARGET_MACHINE" in
		i686*) _arch="X86";;
		x86_64*) _arch="X86";;
		armv5*) _arch="Armv5te";;
		armv6*) _arch="Armv6";;
		armv7*) _arch="Armv7";;
		aarch64*) _arch="AArch64";;
		mips*) _arch="Mips";;
		ppc*) _arch="PowerPC";;
	esac
	configure_args+=" -DLLVM_TARGET_ARCH=${_arch}"
	configure_args+=" -DLLVM_HOST_TRIPLE=${XBPS_CROSS_TRIPLET:-$XBPS_TRIPLET}"
	configure_args+=" -DLLVM_DEFAULT_TARGET_TRIPLE=${XBPS_CROSS_TRIPLET:-$XBPS_TRIPLET}"
	configure_args+=" -G Ninja"
	configure_args+=" -S $wrksrc/llvm"
}

do_build() {
    cd ${wrksrc}
    ninja -C build -j${XBPS_MAKEJOBS}
}

do_check() {

    ninja -C _build $NINJAFLAGS check-llvm
    ninja -C _build $NINJAFLAGS check-polly
    ninja -C _build $NINJAFLAGS check-lld
}

do_install() {
	cd ${wrksrc}/llvm
	vlicense LICENSE.TXT

	cd ../build
	cmake -DCMAKE_INSTALL_PREFIX=${DESTDIR}/usr -P cmake_install.cmake

	# Fix permissions of static libs
	chmod -x ${DESTDIR}/usr/lib/*.a

	# Required for multilib.
	if [ "$XBPS_TARGET_MACHINE" = "x86_64" ]; then
		for _header in llvm-config; do
			mv ${DESTDIR}/usr/include/llvm/Config/${_header}{,-64}.h
			vinstall ${FILESDIR}/llvm-Config-${_header}.h 644 \
				usr/include/llvm/Config ${_header}.h
		done
	fi

	# Remove llvm-config-host in cross builds.
	if [ "$CROSS_BUILD" ]; then
		rm -f ${DESTDIR}/usr/bin/llvm-config-host
	fi
}

polly_package() {
        archs=noarch
        pkg_install() {
                vmove usr/share/man/man1/scan-build.1
                vmove "/usr/bin/scan-*"
                vmove "/usr/share/scan-*"
                vmove "/usr/libexec/*analyzer"

	}
}

#clang-analyzer_package() {
#	archs=noarch
#	pycompile_dirs="usr/share/scan-view"
#	depends="clang-${version}_${revision} python3"
#	short_desc+=" - A source code analysis framework"
#	homepage="https://clang-analyzer.llvm.org/"
#	pkg_install() {
#		vmove usr/share/man/man1/scan-build.1
#		vmove "/usr/bin/scan-*"
#		vmove "/usr/share/scan-*"
#		vmove "/usr/libexec/*analyzer"
#	}
#}

#clang-tools-extra_package() {
#	lib32disabled=yes
#	depends="clang-${version}_${revision} python3"
#	short_desc+=" - Extra Clang tools"
#	homepage="https://clang.llvm.org/extra/"
#	pkg_install() {
#		vmove usr/bin/clang-apply-replacements
#		vmove usr/bin/clang-query
#		vmove usr/bin/clang-rename
#		vmove usr/bin/clang-tidy
#		vmove usr/bin/diagtool
#		vmove usr/bin/find-all-symbols
#		vmove usr/bin/hmaptool
#		vmove usr/bin/modularize
#		vmove usr/bin/pp-trace
#		vmove usr/bin/sancov
#		vmove "usr/lib/libclangApplyReplacements*"
#		vmove "usr/lib/libclangQuery*"
#		vmove "usr/lib/libclangTidy*"
#		vmove "usr/share/clang/*tidy*"
#	}
#}
#
#clang_package() {
#	lib32disabled=yes
#	depends="libstdc++-devel libgcc-devel  binutils ${XBPS_TARGET_LIBC}-devel
#	 libclang-${version}_${revision}"
#	short_desc+=" - C language family frontend"
#	homepage="https://clang.llvm.org/"
#	pkg_install() {
#		vmove usr/include/clang
#		vmove usr/include/clang-c
#		vmove "usr/bin/*clang*"
#		vmove usr/bin/c-index-test
#		vmove usr/lib/clang
#		vmove usr/lib/cmake/clang
#		vmove "usr/lib/libclang*.a"
#		vmove "usr/lib/libclang*.so"
#		vmove "usr/share/clang"
#	}
#}

#libclang_package() {
#	short_desc+=" - C frontend runtime library"
#	pkg_install() {
#		vmove "usr/lib/libclang.so.*"
#	}
#}
#
#libclang-cpp_package() {
#	short_desc+=" - C frontend runtime library (C++ interface)"
#	pkg_install() {
#		vmove "usr/lib/libclang-cpp.so.*"
#	}
#}
#
#lld_package() {
#	lib32disabled=yes
#	short_desc+=" - linker"
#	homepage="https://lld.llvm.org"
#	pkg_install() {
#		vmove usr/bin/lld*
#		vmove usr/bin/wasm-ld
#		vmove usr/bin/ld.lld*
#	}
#}
#
#lld-devel_package() {
#	lib32disabled=yes
#	short_desc+=" - linker - development files"
#	homepage="https://lld.llvm.org"
#	pkg_install() {
#		vmove usr/include/lld
#		vmove "usr/lib/liblld*a"
#	}
#}
#
#lldb_package() {
#	lib32disabled=yes
#	depends+=" python3-six"
#	short_desc+=" - LLDB debugger"
#	homepage="https://lldb.llvm.org/"
#	pkg_install() {
#		vmove usr/bin/*lldb*
#		vmove usr/lib/liblldb*so.*
#		vmove /usr/lib/python*
#		# Depend on python3-six instead of conflicting
#		rm ${PKGDESTDIR}/usr/lib/python3*/site-packages/six.py
#	}
#}
#
#lldb-devel_package() {
#	lib32disabled=yes
#	depends="lldb>=${version}_${revision}"
#	short_desc+=" - LLDB debugger - development files"
#	pkg_install() {
#		vmove usr/include/lldb
#		vmove "usr/lib/liblldb*.so"
#	}
#}

libllvm10_package() {
	short_desc+=" - runtime library"
	pkg_install() {
		vmove "usr/lib/libLLVM-*.so*"
	}
}
